services:
  portainer:
    container_name: portainer
    restart: always
    ports:
      - ${PORTAINER_PORT}:8000
      - ${PORTAINER_PORT2}:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  # APP
  ems-api:
    container_name: backend-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-service:
        condition: service_started
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=${BE_ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=8080
      # - ASPNETCORE_HTTPS_PORTS=443

      # Database Configuration
      - DatabaseSettings__ConnectionString=Host=postgres;Port=5432;Database=${POSTGRES_DBNAME};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
  
      # JWT Authentication
      - JwtSettings__SecretKey=${BE_JWT_SECRET_KEY}
      - JwtSettings__Issuer=${BE_JWT_ISSUER}
      - JwtSettings__Audience=${BE_JWT_AUDIENCE}
      - JwtSettings__AccessTokenExpirationInMinutes=${BE_JWT_ACCESS_TOKEN_EXPIRATION_MINUTES}
      - JwtSettings__RefreshTokenExpirationInDays=${BE_JWT_REFRESH_TOKEN_EXPIRATION_DAYS}
  
      # Cloudinary Storage
      - Cloudinary__CloudName=${CLOUDINARY_CLOUD_NAME}
      - Cloudinary__ApiKey=${CLOUDINARY_API_KEY}
      - Cloudinary__ApiSecret=${CLOUDINARY_API_SECRET}
      - Cloudinary__FolderPath=${CLOUDINARY_FOLDER_PATH}
  
      # Redis Cache Settings
      - Redis__ConnectionString=redis:6379,connectTimeout=15000,syncTimeout=15000,abortConnect=false,allowAdmin=true
      - Redis__InstanceName=${REDIS_INSTANCE_NAME}
      - Redis__DefaultExpiryTimeInMinutes=${REDIS_DEFAULT_EXPIRY_TIME}
      - Redis__EnableLogging=${REDIS_ENABLE_LOGGING}
      - Redis__MessageQueues__NotificationExtractionQueue=notification-extraction
  
      # Service URLs
      - Services__Ai__BaseUrl=http://ai-service:8000${AI_API_V1_STR}
      - Services__Ai__ApiKey=${AI_API_KEY}
      - Services__Dispatcher__BaseUrl=http://go-dispatcher:8081
      - Services__Dispatcher__ApiKey=${GO_DISPATCHER_API_KEY}
  
      # Logging Configuration
      - Serilog__MinimumLevel__Default=${BE_SERILOG_MINIMUM_LEVEL_DEFAULT}
      - Serilog__WriteTo__0__Args__path=/app/${BE_LOG_PATH}
    volumes:
      - ./Microservices/Expense/logs:/app/${BE_LOG_PATH}
    networks:
      - app-network
    ports:
      - "${BE_PORT}:8080"
      # - "${BE_PORT2}:443"
  
  # AI Microservice
  ai-service:
    container_name: ai-service
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Application settings
      - PROJECT_NAME=${AI_PROJECT_NAME}
      - PROJECT_DESCRIPTION=${AI_PROJECT_DESCRIPTION}
      - VERSION=${AI_VERSION}
      - DEBUG_MODE=${AI_DEBUG_MODE}
      - LOG_LEVEL=${AI_LOG_LEVEL}
      - LOG_PATH=${AI_LOG_PATH}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - API_V1_STR=${AI_API_V1_STR}
      - ALLOWED_HOSTS=${AI_ALLOWED_HOSTS}
      - API_KEY=${AI_API_KEY}
      - BACKEND_BASE_URL=http://ems-api:8080
      - BACKEND_API_KEY=${BE_API_KEY}

      # Redis
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=
      - REDIS_TTL=3600
      - REDIS_INSTANCE_NAME=${REDIS_INSTANCE_NAME}
  
      # LLM API Keys
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}

      # PostgresSQL
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DBNAME}?sslmode=disable
      - POSTGRES_MAX_POOL_SIZE=20
    volumes:
      - ./Microservices/AI/logs:/app/${AI_LOG_PATH}
    networks:
      - app-network
    ports:
      - "${AI_PORT}:8000"

  go-dispatcher:
    container_name: go-dispatcher-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ems-api:
        condition: service_started
    env_file:
      - .env
    environment:
      # Application Configuration
      - APP_ENV=${GO_DISPATCHER_APP_ENV:-development}
      - APP_PORT=8081
      - APP_API_KEY=${GO_DISPATCHER_API_KEY}
      - EVENT_POLLING_INTERVAL=${GO_EVENT_POLLING_INTERVAL:-30s}
      - EVENT_PROCESSING_QUEUE=${GO_EVENT_PROCESSING_QUEUE}
      - EVENT_BATCH_SIZE=${GO_EVENT_BATCH_SIZE}

      # Logging
      - LOG_LEVEL=${GO_DISPATCHER_LOG_LEVEL:-info}
      - LOG_FILENAME=/app/logs/app.log
      - LOG_MAX_SIZE_MB=${GO_DISPATCHER_LOG_MAX_SIZE_MB:-100}
      - LOG_MAX_BACKUPS=${GO_DISPATCHER_LOG_MAX_BACKUPS:-5}
      - LOG_MAX_AGE_DAYS=${GO_DISPATCHER_LOG_MAX_AGE_DAYS:-7}

      # Database (PostgreSQL)
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DBNAME}
      - DB_SSLMODE=${GO_DISPATCHER_DB_SSLMODE:-disable}

      # Redis (for Asynq)
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${GO_DISPATCHER_REDIS_DB:-0}
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE}
      - REDIS_MIN_IDLE_CONNS=${REDIS_MIN_IDLE_CONNS}
      - REDIS_POOL_TIMEOUT=${REDIS_POOL_TIMEOUT}
      - REDIS_IDLE_TIMEOUT=${REDIS_IDLE_TIMEOUT}

      # Firebase
      - FIREBASE_SERVICE_ACCOUNT_KEY_PATH=/app/firebase-account-key.json

      # Backend API
      - BACKEND_API_URL=http://ems-api:8080
      - BACKEND_API_KEY=${GO_DISPATCHER_BE_API_KEY}
      # CORS (Optional - Set defaults or configure via .env)
      # - CORS_ALLOWED_ORIGINS=["*"] # Example
      # - CORS_ALLOWED_METHODS=["GET","POST","PUT","PATCH","DELETE","OPTIONS"]
      # - CORS_ALLOWED_HEADERS=["Accept","Authorization","Content-Type","X-CSRF-Token","X-API-KEY"]
      # - CORS_MAX_AGE=43200 # 12 hours in seconds
    volumes:
      - ./Microservices/Dispatcher/logs:/app/logs
    networks:
      - app-network
    ports:
      - "${GO_DISPATCHER_PORT}:8081"

  # Databases
  postgres:
    container_name: postgres-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DBNAME}
    volumes:
      - ./deployment/postgresql/init-scripts:/docker-entrypoint-initdb.d
      - ./deployment/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - app-network
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Cache
  redis:
    container_name: redis-cache
    restart: unless-stopped
    command: redis-server --appendonly yes --loglevel verbose --protected-mode no --bind 0.0.0.0
    volumes:
      - redis_data:/data
    networks:
      - app-network
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
